// FROM: E:/aspects/canvasSPLforSPA/canvasSPLforSPA/src/app/services/game-configuration-service-ts
import { Injectable } from "@angular/core";
var EXPRESSION_START104;
import { Store } from "@ngrx/store";
var EXPRESSION_END104 = { "EXPRESSION_END": "---------------------------" };
import { AlgorithmMap } from "../models/algorithmMap";
import { PuzzleAppState } from "../store";
var EXPRESSION_START105;
import { DrawBordersService } from "./puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/draw-borders.service";
var EXPRESSION_END105 = { "EXPRESSION_END": "---------------------------" };
var EXPRESSION_START106;
import { PuzzleGeneratorQuadroService } from "./puzzleGenerator/puzzleRenderingAlgorithm/algorithm1/puzzle-generator-quadro.service";
var EXPRESSION_END106 = { "EXPRESSION_END": "---------------------------" };
var EXPRESSION_START107;
import { ShufflePuzzlesService } from "./utils/shuffle-puzzles.service";
var EXPRESSION_END107 = { "EXPRESSION_END": "---------------------------" };
import { DecoratorTypesService } from "../featureManagement/decoratorsVariationPointManagement/decorator-types.service";
@Injectable({
    providedIn: "root"
})
@DecoratorTypesService.wholeBlockFile()
export class GameConfigurationService {
    availableAlgorithms: AlgorithmMap[] = [];
    constructor(
    @DecoratorTypesService.skipLineParameter("[ARG=drawBordersService]")
    drawBordersService: DrawBordersService, 
    @DecoratorTypesService.skipLineParameter("[ARG=store]")
    store: Store<PuzzleAppState>, 
    @DecoratorTypesService.skipLineParameter("[ARG=shufflePuzzlesService]")
    shufflePuzzlesService: ShufflePuzzlesService) {
        var EXPRESSION_START108;
        let puzzleQuatro = { "name": "jigsaw", "instance": new PuzzleGeneratorQuadroService(this.drawBordersService, this.store, this.shufflePuzzlesService) };
        var ELSE108 = { "ELSE": "~~~~~~~~~~~~~~~~~~~~~~~~~" };
        let puzzleQuatroAlter23 = null;
        var EXPRESSION_END108 = { "EXPRESSION_END": "---------------------------" };
        if (puzzleQuatro != null)
            this.availableAlgorithms.push(puzzleQuatro);
        var EXPRESSION_START109;
        let puzzleQuatro2 = { "name": "jigsaw2", "instance": new PuzzleGeneratorQuadroService(this.drawBordersService, this.store, this.shufflePuzzlesService) };
        var ELSE109 = { "ELSE": "~~~~~~~~~~~~~~~~~~~~~~~~~" };
        let puzzleQuatro2Alter24 = null;
        var EXPRESSION_END109 = { "EXPRESSION_END": "---------------------------" };
        if (puzzleQuatro2 != null)
            this.availableAlgorithms.push(puzzleQuatro2);
        return this.applyToMe();
    }
    applyToMe(): GameConfigurationService {
        return this;
    }
    getAlgorithms(): AlgorithmMap[] {
        return this.availableAlgorithms;
    }
    setAlgorithms(algorithms: AlgorithmMap[]): void {
        this.availableAlgorithms = algorithms;
    }
}
