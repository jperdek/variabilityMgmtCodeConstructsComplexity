// FROM: E:/aspects/canvasSPLforSPA/canvasSPLforSPA/src/app/puzzle-builder/pages/zoom-management/zoom-management-component-ts
import { AfterViewInit, Component, Inject } from "@angular/core";
import { MatSlideToggleChange } from "@angular/material/slide-toggle";
import { ZoomManagementInterface } from "src/app/models/zoomManagementInterface";
import { ZoomManagerService } from "src/app/services/puzzleEvents/zoom-manager.service";
import { PuzzleManagerService } from "src/app/services/puzzleGenerator/puzzle-manager.service";
var EXPRESSION_START90 = { "OR": { "zoomCoordinates": "true", "zoomValue": "true" } };
import { ComponentFactoryService } from "src/app/services/dynamicInstantiation/component-factory.service";
var EXPRESSION_END90 = { "EXPRESSION_END": "---------------------------" };
var EXPRESSION_START91 = { "zoomCoordinates": "true" };
import { SetZoomComponent } from "./set-zoom/set-zoom.component";
var EXPRESSION_END91 = { "EXPRESSION_END": "---------------------------" };
import { DecoratorTypesService } from "src/app/featureManagement/decoratorsVariationPointManagement/decorator-types.service";
@Component({
    selector: "app-zoom-management",
    templateUrl: "./zoom-management.component.html",
    styleUrls: ["./zoom-management.component.scss"]
})
export class ZoomManagementComponent implements ZoomManagementInterface, AfterViewInit {
    centerX = 25;
    centerY = 25;
    zoomValue = 1;
    zoomManagerService: ZoomManagerService;
    constructor(puzzleManagerService: PuzzleManagerService, 
    @DecoratorTypesService.skipLineParameter({ "OR": { "zoomCoordinates": "true", "zoomValue": "true" } })
    componentFactoryService: ComponentFactoryService) {
        this.zoomManagerService = puzzleManagerService.getZoomManagerService();
        this.zoomManagerService.initForComponent(this);
    }
    ngAfterViewInit(): void {
        this.getComponentElement(this);
    }
    public getComponentElement(self: ZoomManagementComponent): Element | null | undefined {
        const zoomHTML = document.getElementsByClassName("zoom-management-part")?.item(0);
        var EXPRESSION_START92 = { "zoomCoordinates": "true" };
        this.addZoomCoordinates(zoomHTML);
        var EXPRESSION_END92 = { "EXPRESSION_END": "---------------------------" };
        var EXPRESSION_START93 = { "zoomValue": "true" };
        this.addZoomValue(zoomHTML);
        var EXPRESSION_END93 = { "EXPRESSION_END": "---------------------------" };
        //  this.addZoomValue(zoomHTML);
        return zoomHTML;
    }
    EXPRESSION_START94 = { "zoomValue": "true" };
    public addZoomValue(zoomHTML: Element | null): void {
        if (zoomHTML !== null) {
            const positionAfterHeading = function <T>(domLocation: HTMLElement, componentRef: ComponentRef<T>) {
                domLocation.insertBefore(componentRef.location.nativeElement, domLocation.children.item(1));
            };
            this.instantiateZoomValueComponentAndEvents(zoomHTML, this, positionAfterHeading);
        }
        else {
            console.log("Zoom coordinates instantiation failed. Zoom HTML is null.");
        }
    }
    EXPRESSION_END94 = { "EXPRESSION_END": "---------------------------" };
    EXPRESSION_START95 = { "zoomValue": "true" };
    public instantiateZoomValueComponentAndEvents(zoomHTML: any, zoomManagementComp: ZoomManagementComponent, positionAfterHeading: Function): void {
        const zoomValueRef = this.componentFactoryService.createComponent(SetZoomComponent, zoomHTML, undefined, positionAfterHeading);
        zoomValueRef.instance.zoomEmitter.subscribe((result: number) => zoomManagementComp.setZoomValue(result));
    }
    EXPRESSION_END95 = { "EXPRESSION_END": "---------------------------" };
    EXPRESSION_START96 = { "zoomCoordinates": "true" };
    public instantiateZoomCoordinatesComponentAndEvents(zoomHTML: any, zoomManagementComp: ZoomManagementComponent, positionAfterHeading: Function): void {
        const zoomCoordinatesRef = this.componentFactoryService.createComponent(SetZoomPositionComponent, zoomHTML, undefined, positionAfterHeading);
        zoomCoordinatesRef.instance.centerXEmitter.subscribe((result: number) => zoomManagementComp.setCenterX(result));
        zoomCoordinatesRef.instance.centerYEmitter.subscribe((result: number) => zoomManagementComp.setCenterY(result));
    }
    EXPRESSION_END96 = { "EXPRESSION_END": "---------------------------" };
    EXPRESSION_START97 = { "zoomCoordinates": "true" };
    public addZoomCoordinates(zoomHTML: Element | null): void {
        if (zoomHTML !== null) {
            const positionAfterHeading = function <T>(domLocation: HTMLElement, componentRef: ComponentRef<T>) {
                domLocation.insertBefore(componentRef.location.nativeElement, domLocation.children.item(1));
            };
            this.instantiateZoomCoordinatesComponentAndEvents(zoomHTML, this, positionAfterHeading);
        }
        else {
            console.log("Zoom coordinates instantiation failed. Zoom HTML is null.");
        }
    }
    EXPRESSION_END97 = { "EXPRESSION_END": "---------------------------" };
    public setCenterXAndY(x: number, y: number): void {
        this.centerX = x;
        this.centerY = y;
    }
    public setCenterX(x: number): void {
        this.centerX = x;
    }
    public setCenterY(y: number): void {
        this.centerY = y;
    }
    public setZoomValue(zoomValue: number): void {
        console.log(zoomValue);
        this.zoomValue = zoomValue;
    }
    public setZoom(): void {
        const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
        this.zoomManagerService.zoomToPointWithZoom(this.centerX, this.centerY, puzzleBoard, this.zoomValue);
    }
    public setZoomFromDefaultToPoint(): void {
        this.applyZoomReset();
        const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
        this.zoomManagerService.zoomToPointWithZoom(this.centerX, this.centerY, puzzleBoard, this.zoomValue);
    }
    public applyZoomIn(): void {
        const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
        this.zoomManagerService.zoomToPoint(this.centerX, this.centerY, puzzleBoard, -125);
    }
    public applyZoomOut(): void {
        const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
        this.zoomManagerService.zoomToPoint(this.centerX, this.centerY, puzzleBoard, +125);
    }
    public applyZoomReset(): void {
        const puzzleBoard = this.puzzleManagerService.getPuzzleBoard();
        this.zoomManagerService.resetZoom(puzzleBoard);
    }
    EXPRESSION_START98 = { "zoom": "true" };
    public toggleZoom($event: MatSlideToggleChange): void {
        if ($event.checked) {
            const zoomContents = document.getElementsByClassName("zoom-content");
            Array.from(zoomContents).forEach(zoomContentDiv => zoomContentDiv.classList.add("hide-zoom-content"));
        }
        else {
            const zoomContents = document.getElementsByClassName("zoom-content");
            Array.from(zoomContents).forEach(zoomContentDiv => zoomContentDiv.classList.remove("hide-zoom-content"));
        }
    }
    EXPRESSION_END98 = { "EXPRESSION_END": "---------------------------" };
}
var EXPRESSION_START99 = { "zoomValue": "true" };
var EXPRESSION_END99 = { "EXPRESSION_END": "---------------------------" };
